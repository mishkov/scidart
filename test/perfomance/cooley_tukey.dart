import 'package:scidart/numdart.dart';
import 'package:scidart/scidart.dart';
import 'package:test/test.dart';

void main() {
  test('fft imrovement', () {
    var input = arrayToComplexArray(Array([
      0.89968999,
      0.89968999,
      0.89968999,
      0.89968999,
      0.89968999,
      0.61548992,
      0.89968999,
      0.61548992,
      0.61548992,
      0.33128984,
      0.33128984,
      0.047089768,
      0.047089768,
      0.33128984,
      0.33128984,
      0.33128984,
      0.61548992,
      0.89968999,
      1.1838901,
      0.61548992,
      0.047089768,
      -0.23711031,
      0.047089768,
      0.89968999,
      0.33128984,
      -1.3739106,
      -1.3739106,
      -1.3739106,
      -0.23711031,
      0.047089768,
      0.61548992,
      0.61548992,
      -0.52131038,
      -1.6581107,
      -2.2265108,
      -1.9423108,
      -0.80551046,
      -0.52131038,
      0.33128984,
      0.33128984,
      0.61548992,
      0.33128984,
      0.047089768,
      -0.23711031,
      -0.23711031,
      -0.52131038,
      -0.80551046,
      -0.80551046,
      -0.52131038,
      -0.52131038,
      -0.52131038,
      -0.23711031,
      -0.52131038,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.52131038,
      -0.52131038,
      -0.52131038,
      -0.52131038,
      0.047089768,
      0.33128984,
      0.89968999,
      0.33128984,
      0.89968999,
      0.89968999,
      -0.23711031,
      -0.80551046,
      -0.80551046,
      0.047089768,
      1.1838901,
      1.4680901,
      0.89968999,
      -0.52131038,
      -0.80551046,
      -0.52131038,
      -0.23711031,
      0.047089768,
      -0.23711031,
      -0.52131038,
      -0.52131038,
      0.047089768,
      0.047089768,
      0.33128984,
      0.047089768,
      0.047089768,
      0.047089768,
      0.047089768,
      0.047089768,
      0.047089768,
      -0.23711031,
      -0.23711031,
      0.047089768,
      0.047089768,
      0.33128984,
      0.047089768,
      -0.23711031,
      -0.23711031,
      0.047089768,
      0.89968999,
      0.89968999,
      1.1838901,
      0.61548992,
      -0.23711031,
      0.047089768,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.52131038,
      -0.52131038,
      -1.9423108,
      -2.2265108,
      -2.5107109,
      -1.6581107,
      -0.52131038,
      0.33128984,
      1.4680901,
      1.1838901,
      0.61548992,
      -0.23711031,
      -0.52131038,
      -0.52131038,
      -0.52131038,
      -0.52131038,
      0.047089768,
      0.047089768,
      0.047089768,
      -0.23711031,
      -0.52131038,
      -0.80551046,
      -0.80551046,
      -0.23711031,
      0.047089768,
      0.047089768,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      0.047089768,
      0.33128984,
      0.33128984,
      1.7522902,
      0.89968999,
      0.33128984,
      0.33128984,
      -0.80551046,
      -0.80551046,
      -1.0897105,
      -0.23711031,
      0.61548992,
      0.61548992,
      -0.23711031,
      -0.80551046,
      -1.0897105,
      -0.80551046,
      -0.23711031,
      0.047089768,
      0.047089768,
      0.047089768,
      -0.23711031,
      0.33128984,
      0.61548992,
      0.61548992,
      0.61548992,
      0.33128984,
      0.33128984,
      0.33128984,
      0.047089768,
      0.047089768,
      -0.23711031,
      -0.23711031,
      0.047089768,
      0.047089768,
      0.047089768,
      0.047089768,
      -0.23711031,
      0.047089768,
      0.33128984,
      0.61548992,
      0.61548992,
      0.89968999,
      0.33128984,
      -0.52131038,
      0.33128984,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.52131038,
      -1.3739106,
      -2.2265108,
      -2.794911,
      -2.2265108,
      -0.80551046,
      0.89968999,
      1.4680901,
      1.1838901,
      0.33128984,
      -0.23711031,
      -0.23711031,
      -0.80551046,
      -1.0897105,
      -0.52131038,
      0.047089768,
      0.61548992,
      0.61548992,
      0.33128984,
      0.047089768,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      -0.23711031,
      0.047089768,
      0.33128984,
      0.89968999,
      0.89968999,
      1.1838901,
      0.89968999,
      -0.23711031,
      0.047089768,
      2.0364903,
      2.3206904,
      0.61548992,
      -0.52131038,
      -1.0897105,
      -0.52131038,
      0.33128984,
      0.61548992,
      -0.23711031,
      -0.80551046,
      -1.6581107,
      -1.9423108,
      -1.0897105,
      -0.52131038,
      -0.23711031,
      -0.52131038,
      -0.23711031,
      0.047089768,
      0.33128984,
      0.89968999,
      0.61548992,
      0.89968999,
      0.61548992,
      0.61548992,
      0.61548992,
      0.61548992,
      0.61548992,
      0.33128984,
      0.33128984,
      0.33128984,
      0.33128984,
      0.047089768,
      0.33128984,
      0.33128984
    ]));

    const numberOfmeasurements = 10000;
    var measurements = [];
    for (var i = 0; i < numberOfmeasurements; i++) {
      final stopwatch = Stopwatch()..start();
      fft(input);
      stopwatch.stop();

      final stopwatchImproved = Stopwatch()..start();
      fftImroved(input);
      stopwatchImproved.stop();

      final increase = (1 -
              (stopwatchImproved.elapsedMicroseconds /
                  stopwatch.elapsedMicroseconds)) *
          100;

      measurements.add(increase);
      print('\x1B[2J\x1B[0;0H');
      print(
          'progress: [${'=' * (50 * (i / numberOfmeasurements)).toInt()}${' ' * (50 - 50 * (i / numberOfmeasurements)).toInt()}] ${((i / numberOfmeasurements) * 100).toInt()}%');
    }

    final averageIncrease = measurements.reduce((value, element) {
          return value + element;
        }) /
        measurements.length;

    print('\nAverage Increase: $averageIncrease%\n');
  });
}
